#cloud-init script to stand up a kubernetes cluster on ubuntu 24.04 LTS

#cloud-config
package_update: true
package_upgrade: true

#install packages. do not install docker. use containerd.
packages:
  # Base system and Kubernetes prerequisites
  - apt-transport-https           # Enables HTTPS for APT repositories
  - ca-certificates               # Validates SSL certificates
  - curl                          # Fetches binaries and configs
  - gnupg                         # Handles GPG keys for repo signing
  - lsb-release                   # Detects distro info for conditional logic
  - software-properties-common    # Adds external repositories
  - socat                         # Required for kube-proxy and port forwarding
  - conntrack                     # Tracks network connections (used by kube-proxy)
  - iptables                      # Ensures firewall compatibility
  - ebtables                      # Handles Ethernet bridging (CNI support)
  - ethtool                       # Diagnoses NIC behavior and link status
  - net-tools                     # Legacy but useful for `ifconfig`, `netstat`
  - neovim                        # For clarity annotation and YAML editing
  - systemd                       # Ensures journalctl and service management
  - yamllint                      # Find lint errors in yaml files

  # Diagnostic and Monitoring Suite
  - htop                          # Interactive process viewer for CPU/memory load
  - lsof                          # Lists open files and ports (bind visibility)
  - strace                        # Syscall-level tracing for container startup failures
  - tcpdump                       # Packet inspection for control plane probes and TLS
  - iftop                         # Real-time network usage by interface
  - nethogs                       # Per-process bandwidth monitoring
  - iproute2                      # Modern IP, SS, TC tools for socket and route inspection
  - nmap                          # Port scanning and service discovery across nodes
  - wget                          # Alternative HTTP probe tool
  - jq                            # JSON parsing for `crictl inspect` and runtime metadata
  - auditd                        # System audit logging for symbolic rupture tracing
  - e2fsprogs                     # Filesystem diagnostics (fsck, tune2fs, etc.)
  - util-linux                    # Includes mount, umount, blkid, and other core tools
  - prometheus-node-exporter     # Exposes system metrics for Prometheus scraping


# Various write files
write_files:
  - path: /etc/crictl.yaml
    content: |
      runtime-endpoint: unix:///var/run/containerd/containerd.sock
      image-endpoint: unix:///var/run/containerd/containerd.sock
      timeout: 10
      debug: false
  - path: /etc/kubernetes/kubeadm-config.yaml
    content: |
      apiVersion: kubeadm.k8s.io/v1beta3
      kind: InitConfiguration
      localAPIEndpoint:
        advertiseAddress: 192.168.70.1
      nodeRegistration:
        criSocket: "unix:///var/run/containerd/containerd.sock"
        name: cp-1
        kubeletExtraArgs:
          hostname-override: cp-1
          v: "5"
      ---
      apiVersion: kubeadm.k8s.io/v1beta3
      kind: ClusterConfiguration
      kubernetesVersion: "v1.33.4"
      imageRepository: registry.k8s.io
      networking:
        podSubnet: "192.168.0.0/16"
        serviceSubnet: "10.96.0.0/12"
      apiServer:
        certSANs:
          - 127.0.0.1
          - 192.168.70.72
          - 10.96.0.1
          - localhost
      controllerManager:
        extraArgs:
          bind-address: "127.0.0.1"
      scheduler:
        extraArgs:
          bind-address: "127.0.0.1"
      ---
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      address: 0.0.0.0
      port: 10250
      readOnlyPort: 0
      serializeImagePulls: false
      cgroupDriver: systemd
      failSwapOn: false
      staticPodPath: /etc/kubernetes/manifests
      containerRuntimeEndpoint: unix:///var/run/containerd/containerd.sock
      authentication:
        webhook:
          enabled: false
      authorization:
        mode: AlwaysAllow
      logging:
        verbosity: 5
      evictionHard:
          memory.available:  "100Mi"
          nodefs.available:  "10%"
          nodefs.inodesFree: "5%"
          imagefs.available: "15%"
          imagefs.inodesFree: "5%"

  - path: /etc/kubernetes/kubeadm-config.yaml
    content: |
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      address: 0.0.0.0
      port: 10250
      readOnlyPort: 0
      serializeImagePulls: false
      cgroupDriver: systemd
      failSwapOn: false
      staticPodPath: /etc/kubernetes/manifests
      containerRuntimeEndpoint: unix:///var/run/containerd/containerd.sock
      authentication:
        webhook:
          enabled: false
      authorization:
        mode: AlwaysAllow
      logging:
        verbosity: 5
      evictionHard:
          memory.available:  "100Mi"
          nodefs.available:  "10%"
          nodefs.inodesFree: "5%"
          imagefs.available: "15%"
          imagefs.inodesFree: "5%"


runcmd:
  # Add Docker GPG key
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  - chmod a+r /etc/apt/keyrings/docker.gpg

  # Add Docker APT repository
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  
  # Create all startup directories
  - sudo mkdir -p /etc/systemd/system/kubelet.service.d
  - sudo mkdir -p /home/ubuntu/.kube
  - sudo mkdir -p /etc/kubernetes
  - sudo mkdir -p /opt/cni/bin
  - sudo mkdir -p /etc/containerd


  # Install kubectl, kubeadm, and kubelet from the official pkgs.k8s.io repository
  - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  - chmod a+r /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  - echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list > /dev/null
  - apt-get update
  - apt-get install -y etcd-client containerd.io kubelet kubeadm kubectl
  - apt-mark hold containerd.io kubelet kubeadm kubectl

  # Installl Calico CNI plugins and calicoctl
  - curl -LO https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz
  - sudo tar -xzvf cni-plugins-linux-amd64-v1.3.0.tgz -C /opt/cni/bin
  - sudo rm cni-plugins-linux-amd64-v1.3.0.tgz
  - chmod +x /opt/cni/bin/*
  - sudo curl -L https://github.com/projectcalico/calicoctl/releases/download/v3.27.0/calicoctl-linux-amd64 -o /usr/local/bin/calicoctl
  - chmod +x /usr/local/bin/calicoctl

  # Install crictl (CRI client)
  - curl -LO https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.33.0/crictl-v1.33.0-linux-arm64.tar.gz
  - tar -zxvf crictl-v1.33.0-linux-arm64.tar.gz
  - chmod +x crictl
  - sudo mv crictl /usr/local/bin/

  # Configure containerd. cgroup drivers must match.
  - sudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
  - sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
  
  # Initialize bridge traffic inspection (CNI compatibility)
  - modprobe br_netfilter
  - echo 'br_netfilter' | sudo tee -a /etc/modules
  - grep -qxF 'net.bridge.bridge-nf-call-iptables=1' /etc/sysctl.d/k8s.conf | echo 'net.bridge.bridge-nf-call-iptables=1' | sudo tee -a /etc/sysctl.d/k8s.conf
  - sudo sysctl --system

  # Enable kubelet, containerd etc. Ensure the 'write_files' section is pre-configured
  - sudo systemctl daemon-reexec
  - sudo systemctl daemon-reload
  - sudo systemctl enable kubelet
  - sudo systemctl enable containerd
  - sudo systemctl start kubelet
  - sudo systemctl start containerd